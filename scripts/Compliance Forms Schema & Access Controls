-- =====================================================
-- COMPREHENSIVE COMPLIANCE FORMS DATABASE SETUP - FIXED
-- =====================================================
-- This script creates all necessary tables, storage, and RLS policies
-- for the compliance forms system (Birth Certificate, Sole Proprietorship, TIN Registration)
-- with proper authentication for admin_users and agents roles
--
-- FIX: Changed all references from "admins" to "admin_users" to match actual database schema

-- =====================================================
-- 1. STORAGE BUCKET FOR COMPLIANCE IMAGES
-- =====================================================

-- Create storage bucket for compliance images if it doesn't exist
INSERT INTO storage.buckets (id, name, public)
VALUES ('compliance-images', 'compliance-images', true)
ON CONFLICT (id) DO NOTHING;

-- Storage policies for compliance images
DROP POLICY IF EXISTS "Agents can upload compliance images" ON storage.objects;
CREATE POLICY "Agents can upload compliance images"
ON storage.objects FOR INSERT
TO authenticated
WITH CHECK (
  bucket_id = 'compliance-images' AND
  (auth.uid() IN (SELECT id FROM agents WHERE id = auth.uid()))
);

DROP POLICY IF EXISTS "Agents can view their own compliance images" ON storage.objects;
CREATE POLICY "Agents can view their own compliance images"
ON storage.objects FOR SELECT
TO authenticated
USING (
  bucket_id = 'compliance-images' AND
  (
    auth.uid() IN (SELECT id FROM agents WHERE id = auth.uid()) OR
    auth.uid() IN (SELECT id FROM admin_users WHERE id = auth.uid())
  )
);

DROP POLICY IF EXISTS "Admins can view all compliance images" ON storage.objects;
CREATE POLICY "Admins can view all compliance images"
ON storage.objects FOR SELECT
TO authenticated
USING (
  bucket_id = 'compliance-images' AND
  auth.uid() IN (SELECT id FROM admin_users WHERE id = auth.uid())
);

DROP POLICY IF EXISTS "Admins can delete compliance images" ON storage.objects;
CREATE POLICY "Admins can delete compliance images"
ON storage.objects FOR DELETE
TO authenticated
USING (
  bucket_id = 'compliance-images' AND
  auth.uid() IN (SELECT id FROM admin_users WHERE id = auth.uid())
);

-- =====================================================
-- 2. FORM SUBMISSIONS TABLE
-- =====================================================

-- Drop existing table if exists
DROP TABLE IF EXISTS form_submissions CASCADE;

-- Create form_submissions table with all fields from all three forms
CREATE TABLE form_submissions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  agent_id UUID NOT NULL REFERENCES agents(id) ON DELETE CASCADE,
  form_id TEXT NOT NULL, -- 'birth-certificate', 'sole-proprietorship', 'tin-registration'
  form_data JSONB NOT NULL DEFAULT '{}'::jsonb, -- Stores all form fields as JSON
  status TEXT NOT NULL DEFAULT 'Pending' CHECK (status IN ('Pending', 'Processing', 'Completed', 'Delivered')),
  submitted_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Create indexes for better query performance
CREATE INDEX idx_form_submissions_agent_id ON form_submissions(agent_id);
CREATE INDEX idx_form_submissions_form_id ON form_submissions(form_id);
CREATE INDEX idx_form_submissions_status ON form_submissions(status);
CREATE INDEX idx_form_submissions_submitted_at ON form_submissions(submitted_at DESC);
CREATE INDEX idx_form_submissions_form_data ON form_submissions USING GIN (form_data);

-- RLS Policies for form_submissions
ALTER TABLE form_submissions ENABLE ROW LEVEL SECURITY;

-- Agents can insert their own submissions
DROP POLICY IF EXISTS "Agents can insert their own submissions" ON form_submissions;
CREATE POLICY "Agents can insert their own submissions"
ON form_submissions FOR INSERT
TO authenticated
WITH CHECK (
  agent_id = auth.uid() AND
  auth.uid() IN (SELECT id FROM agents WHERE id = auth.uid())
);

-- Agents can view their own submissions
DROP POLICY IF EXISTS "Agents can view their own submissions" ON form_submissions;
CREATE POLICY "Agents can view their own submissions"
ON form_submissions FOR SELECT
TO authenticated
USING (
  agent_id = auth.uid() AND
  auth.uid() IN (SELECT id FROM agents WHERE id = auth.uid())
);

-- Agents can update their own pending submissions
DROP POLICY IF EXISTS "Agents can update their own pending submissions" ON form_submissions;
CREATE POLICY "Agents can update their own pending submissions"
ON form_submissions FOR UPDATE
TO authenticated
USING (
  agent_id = auth.uid() AND
  status = 'Pending' AND
  auth.uid() IN (SELECT id FROM agents WHERE id = auth.uid())
)
WITH CHECK (
  agent_id = auth.uid() AND
  auth.uid() IN (SELECT id FROM agents WHERE id = auth.uid())
);

-- Admins can view all submissions
DROP POLICY IF EXISTS "Admins can view all submissions" ON form_submissions;
CREATE POLICY "Admins can view all submissions"
ON form_submissions FOR SELECT
TO authenticated
USING (
  auth.uid() IN (SELECT id FROM admin_users WHERE id = auth.uid())
);

-- Admins can update all submissions
DROP POLICY IF EXISTS "Admins can update all submissions" ON form_submissions;
CREATE POLICY "Admins can update all submissions"
ON form_submissions FOR UPDATE
TO authenticated
USING (
  auth.uid() IN (SELECT id FROM admin_users WHERE id = auth.uid())
)
WITH CHECK (
  auth.uid() IN (SELECT id FROM admin_users WHERE id = auth.uid())
);

-- Admins can delete submissions
DROP POLICY IF EXISTS "Admins can delete submissions" ON form_submissions;
CREATE POLICY "Admins can delete submissions"
ON form_submissions FOR DELETE
TO authenticated
USING (
  auth.uid() IN (SELECT id FROM admin_users WHERE id = auth.uid())
);

-- =====================================================
-- 3. FORM IMAGES TABLE
-- =====================================================

-- Drop existing table if exists
DROP TABLE IF EXISTS form_images CASCADE;

-- Create form_images table
CREATE TABLE form_images (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  submission_id UUID NOT NULL REFERENCES form_submissions(id) ON DELETE CASCADE,
  image_type TEXT NOT NULL, -- 'signature', 'ghana_card_front', 'ghana_card_back', 'mother_id_front', 'mother_id_back', 'father_id_front', 'father_id_back'
  image_url TEXT NOT NULL,
  uploaded_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Create indexes
CREATE INDEX idx_form_images_submission_id ON form_images(submission_id);
CREATE INDEX idx_form_images_image_type ON form_images(image_type);

-- RLS Policies for form_images
ALTER TABLE form_images ENABLE ROW LEVEL SECURITY;

-- Agents can insert images for their own submissions
DROP POLICY IF EXISTS "Agents can insert images for their own submissions" ON form_images;
CREATE POLICY "Agents can insert images for their own submissions"
ON form_images FOR INSERT
TO authenticated
WITH CHECK (
  submission_id IN (
    SELECT id FROM form_submissions WHERE agent_id = auth.uid()
  ) AND
  auth.uid() IN (SELECT id FROM agents WHERE id = auth.uid())
);

-- Agents can view images for their own submissions
DROP POLICY IF EXISTS "Agents can view images for their own submissions" ON form_images;
CREATE POLICY "Agents can view images for their own submissions"
ON form_images FOR SELECT
TO authenticated
USING (
  submission_id IN (
    SELECT id FROM form_submissions WHERE agent_id = auth.uid()
  ) AND
  auth.uid() IN (SELECT id FROM agents WHERE id = auth.uid())
);

-- Admins can view all images
DROP POLICY IF EXISTS "Admins can view all images" ON form_images;
CREATE POLICY "Admins can view all images"
ON form_images FOR SELECT
TO authenticated
USING (
  auth.uid() IN (SELECT id FROM admin_users WHERE id = auth.uid())
);

-- Admins can delete images
DROP POLICY IF EXISTS "Admins can delete images" ON form_images;
CREATE POLICY "Admins can delete images"
ON form_images FOR DELETE
TO authenticated
USING (
  auth.uid() IN (SELECT id FROM admin_users WHERE id = auth.uid())
);

-- =====================================================
-- 4. FORM STATUS HISTORY TABLE
-- =====================================================

-- Drop existing table if exists
DROP TABLE IF EXISTS form_status CASCADE;

-- Create form_status table for tracking status changes
CREATE TABLE form_status (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  submission_id UUID NOT NULL REFERENCES form_submissions(id) ON DELETE CASCADE,
  status TEXT NOT NULL,
  updated_by TEXT NOT NULL, -- 'admin' or 'agent'
  notes TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Create indexes
CREATE INDEX idx_form_status_submission_id ON form_status(submission_id);
CREATE INDEX idx_form_status_created_at ON form_status(created_at DESC);

-- RLS Policies for form_status
ALTER TABLE form_status ENABLE ROW LEVEL SECURITY;

-- Agents can view status for their own submissions
DROP POLICY IF EXISTS "Agents can view status for their own submissions" ON form_status;
CREATE POLICY "Agents can view status for their own submissions"
ON form_status FOR SELECT
TO authenticated
USING (
  submission_id IN (
    SELECT id FROM form_submissions WHERE agent_id = auth.uid()
  ) AND
  auth.uid() IN (SELECT id FROM agents WHERE id = auth.uid())
);

-- Admins can view all status records
DROP POLICY IF EXISTS "Admins can view all status records" ON form_status;
CREATE POLICY "Admins can view all status records"
ON form_status FOR SELECT
TO authenticated
USING (
  auth.uid() IN (SELECT id FROM admin_users WHERE id = auth.uid())
);

-- Admins can insert status records
DROP POLICY IF EXISTS "Admins can insert status records" ON form_status;
CREATE POLICY "Admins can insert status records"
ON form_status FOR INSERT
TO authenticated
WITH CHECK (
  auth.uid() IN (SELECT id FROM admin_users WHERE id = auth.uid())
);

-- =====================================================
-- 5. COMPLIANCE CHAT TABLE
-- =====================================================

-- Drop existing table if exists
DROP TABLE IF EXISTS compliance_chat CASCADE;

-- Create compliance_chat table for agent-admin communication
CREATE TABLE compliance_chat (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  submission_id UUID NOT NULL REFERENCES form_submissions(id) ON DELETE CASCADE,
  sender_type TEXT NOT NULL CHECK (sender_type IN ('agent', 'admin')),
  message TEXT NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Create indexes
CREATE INDEX idx_compliance_chat_submission_id ON compliance_chat(submission_id);
CREATE INDEX idx_compliance_chat_created_at ON compliance_chat(created_at ASC);

-- RLS Policies for compliance_chat
ALTER TABLE compliance_chat ENABLE ROW LEVEL SECURITY;

-- Agents can view chat for their own submissions
DROP POLICY IF EXISTS "Agents can view chat for their own submissions" ON compliance_chat;
CREATE POLICY "Agents can view chat for their own submissions"
ON compliance_chat FOR SELECT
TO authenticated
USING (
  submission_id IN (
    SELECT id FROM form_submissions WHERE agent_id = auth.uid()
  ) AND
  auth.uid() IN (SELECT id FROM agents WHERE id = auth.uid())
);

-- Agents can send messages for their own submissions
DROP POLICY IF EXISTS "Agents can send messages for their own submissions" ON compliance_chat;
CREATE POLICY "Agents can send messages for their own submissions"
ON compliance_chat FOR INSERT
TO authenticated
WITH CHECK (
  submission_id IN (
    SELECT id FROM form_submissions WHERE agent_id = auth.uid()
  ) AND
  sender_type = 'agent' AND
  auth.uid() IN (SELECT id FROM agents WHERE id = auth.uid())
);

-- Admins can view all chat messages
DROP POLICY IF EXISTS "Admins can view all chat messages" ON compliance_chat;
CREATE POLICY "Admins can view all chat messages"
ON compliance_chat FOR SELECT
TO authenticated
USING (
  auth.uid() IN (SELECT id FROM admin_users WHERE id = auth.uid())
);

-- Admins can send messages to any submission
DROP POLICY IF EXISTS "Admins can send messages to any submission" ON compliance_chat;
CREATE POLICY "Admins can send messages to any submission"
ON compliance_chat FOR INSERT
TO authenticated
WITH CHECK (
  sender_type = 'admin' AND
  auth.uid() IN (SELECT id FROM admin_users WHERE id = auth.uid())
);

-- Admins can delete chat messages
DROP POLICY IF EXISTS "Admins can delete chat messages" ON compliance_chat;
CREATE POLICY "Admins can delete chat messages"
ON compliance_chat FOR DELETE
TO authenticated
USING (
  auth.uid() IN (SELECT id FROM admin_users WHERE id = auth.uid())
);

-- =====================================================
-- 6. FUNCTIONS AND TRIGGERS
-- =====================================================

-- Function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger for form_submissions
DROP TRIGGER IF EXISTS update_form_submissions_updated_at ON form_submissions;
CREATE TRIGGER update_form_submissions_updated_at
BEFORE UPDATE ON form_submissions
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

-- =====================================================
-- 7. HELPFUL QUERIES FOR MONITORING
-- =====================================================

-- View to see all submissions with agent names
CREATE OR REPLACE VIEW compliance_submissions_view AS
SELECT 
  fs.id,
  fs.agent_id,
  a.full_name AS agent_name,
  a.phone_number AS agent_phone,
  fs.form_id,
  fs.form_data,
  fs.status,
  fs.submitted_at,
  fs.updated_at,
  COUNT(DISTINCT fi.id) AS image_count,
  COUNT(DISTINCT cc.id) AS message_count
FROM form_submissions fs
LEFT JOIN agents a ON fs.agent_id = a.id
LEFT JOIN form_images fi ON fs.id = fi.submission_id
LEFT JOIN compliance_chat cc ON fs.id = cc.submission_id
GROUP BY fs.id, a.full_name, a.phone_number;

-- Grant access to the view
GRANT SELECT ON compliance_submissions_view TO authenticated;

-- =====================================================
-- SETUP COMPLETE
-- =====================================================

-- Verify tables were created
SELECT 
  'form_submissions' AS table_name, 
  COUNT(*) AS row_count 
FROM form_submissions
UNION ALL
SELECT 
  'form_images' AS table_name, 
  COUNT(*) AS row_count 
FROM form_images
UNION ALL
SELECT 
  'form_status' AS table_name, 
  COUNT(*) AS row_count 
FROM form_status
UNION ALL
SELECT 
  'compliance_chat' AS table_name, 
  COUNT(*) AS row_count 
FROM compliance_chat;
